[[http://melpa.org/#/multi-line][file:http://melpa.org/packages/multi-line-badge.svg]]

* Demo
[[https://asciinema.org/a/dwft2l94f75x9l46wmdhbm5lh?t=4][https://asciinema.org/a/dwft2l94f75x9l46wmdhbm5lh.png]]

* About
multi-line aims to provide a flexible framework for automatically
multi-lining and single-lining function invocations and definitions,
array and map literals and more. It relies on functions that are
defined on a per major mode basis wherever it can so that it functions
correctly across many different programming languages.
* Installation

Install from MELPA with ~M-x package-install multi-line~. See the [[https://github.com/milkypostman/melpa][melpa repository]] for details about how to set up MELPA if you have not already done so.
* Setup

#+BEGIN_SRC emacs-lisp
(require 'multi-line)
(global-set-key (kbd "C-c d") 'multi-line)
#+END_SRC
* Configuration/Language Support
multi-line can be configured to behave differently depending on the major mode of the current-buffer. The behavior of multi-line is described with a multi-line-strategy object that has three components: a find-strategy, an enter-strategy and a replace-strategy. The following code snippet defines the respacer that is used in emacs-lisp mode.

#+BEGIN_SRC emacs-lisp
  (multi-line-set-strategy
   multi-line-master-strategy 'emacs-lisp-mode
   (make-instance multi-line-strategy
                  :find
                  (make-instance
                   multi-line-forward-sexp-find-strategy
                   :split-regex "[[:space:]\n]+"
                   :done-regex "[[:space:]]*)"
                   :split-advance-fn 'multi-line-lisp-advance-fn)
                  :enter
                  (make-instance
                   multi-line-up-list-enter-strategy)
                  :respace multi-line-skip-fill-respacer))
#+END_SRC

More details about how to define custom respacers will be added here shortly.

* Notes
** Work In Progress/Language Support
*** multi-line is still very much a work in progress. It is likely that there are kinks to iron out, especially in languages that have not yet been tested by the author. With that said, multi-line is designed to be as poly-lingual as possible. Though multi-line relies as much as possible on functions defined by major-mode like forward-sexp, it is likely that many languages will need small peices of additional custom code. Please feel free to file issues requesting support for any language.
** Contextual Behavior
Multi-line can theoretically be configured to behave in different ways depending on arbitrary contextual factors. At the moment, there is only built-in infrastructure to define behavior on a per major mode basis, but with a bit of additional elisp, other contextual factors could determine multi-lining behavior. Github issues requesting such behavior are welcome.
