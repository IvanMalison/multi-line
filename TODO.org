* TODO Account for characters AFTER last respace position when respacing to a fill column
  :LOGBOOK:
  - State "TODO"       from              [2016-08-22 Mon 15:50]
  :END:
* TODO Handle forced grouping of grouped multi-line targets as with keywords in lisp
  :LOGBOOK:
  - State "TODO"       from              [2016-08-22 Mon 15:51]
  :END:
#+BEGIN_SRC emacs-lisp
(multi-line-forward-sexp-find-strategy
 :split-regex "[[:space:]\n]+"
 :done-regex "[[:space:]]*)}]"
 :split-advance-fn 'multi-line-lisp-advance-fn)
#+END_SRC
* DONE Cycle through different respace strategies with multiple multi-line invocations
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2016-08-22 Mon 17:12]
  - State "TODO"       from              [2016-08-22 Mon 15:52]
  :END:
* TODO Handle applying multi-line strategies in derived modes
  :LOGBOOK:
  - State "TODO"       from              [2016-08-22 Mon 16:03]
  :END:
Should multi-line-strategy just be made buffer local?
Seems like that would make things much simpler
* TODO "Aggressive" fill multi-lining
  :LOGBOOK:
  - State "TODO"       from              [2016-08-22 Mon 20:56]
  :END:
...Where a new-line is inserted before not doing so would exceed the fill column to avoid situations like where multi-lining becomes very ineffective
#+BEGIN_SRC emacs-lisp
(org-projectile:update-project-to-org-filepath-fdsafd-fds "multi-line"
                                                          (imalison:join-paths "~"))
#+END_SRC

The "aggresive" version would looke like

#+BEGIN_SRC emacs-lisp
(org-projectile:update-project-to-org-filepath-fdsafd-fds
 "multi-line" (imalison:join-paths "~"))
#+END_SRC
* TODO Recursive multi-lining
  :LOGBOOK:
  - State "TODO"       from              [2016-08-22 Mon 21:02]
  :END:
Ex:
#+BEGIN_SRC emacs-lisp
(my-function-name "a long ass string" "more stuff" (afdasfdsa afdsafdsa afdsafdsa afdsafa afdfdsa "more crap" "crap"))
#+END_SRC
To:
#+BEGIN_SRC emacs-lisp
(my-function-name "a long ass string" "more stuff"
                  (afdasfdsa afdsafdsa afdsafdsa afdsafa afdfdsa
                             "more crap" "crap"))
#+END_SRC
Instead of:
#+BEGIN_SRC emacs-lisp
(my-function-name "a long ass string" "more stuff"
                  (afdasfdsa afdsafdsa afdsafdsa afdsafa afdfdsa "more crap" "crap"))
#+END_SRC
* TODO Fill column does not seem to work properly
  :PROPERTIES:
  :CREATED:  [2015-11-27 Fri 11:58]
  :END:
  :LOGBOOK:
  - State "TODO"       from              [2015-11-27 Fri 11:58]
  :END:
...in situations where the next separator mark is not on the same line as the multi-lining line because it looks at the column number position at the separator (usually ,)
* TODO Fill respacer does not consider characters from things that follow the end of the respaced definition
  :PROPERTIES:
  :CREATED:  [2015-11-23 Mon 17:59]
  :END:
  :LOGBOOK:
  - Note taken on [2015-11-30 Mon 20:24] \\
	Here is an example:

	#+BEGIN_SRC go
	   func (a *Account) paramsToStateChange(newState ordert.AccountState) *db.AccountStateChange {
	   }
	#+END_SRC
  - State "TODO"       from              [2015-11-23 Mon 17:59]
  :END:
* TODO Being inside of quotes can mess things up in python mode
  :PROPERTIES:
  :CREATED:  [2015-11-23 Mon 13:03]
  :END:
  :LOGBOOK:
  - State "TODO"       from              [2015-11-23 Mon 13:03]
  :END:
* TODO ruby-map literals
  :PROPERTIES:
  :CREATED:  [2015-11-29 Sun 23:59]
  :END:
  :LOGBOOK:
  - State "TODO"       from              [2015-11-29 Sun 23:59]
  :END:
